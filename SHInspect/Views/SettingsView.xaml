<UserControl x:Class="SHInspect.Views.SettingsView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:behaviours="clr-namespace:SHInspect.Classes"
        mc:Ignorable="d"
        xmlns:converters="clr-namespace:SHInspect.Converters"
        xmlns:ui="http://schemas.modernwpf.com/2019">
    <UserControl.Resources>
        <converters:ThemeTypeConverter x:Key="ThemeTypeConverter"/>
        <converters:NumericValueConverter x:Key="numericValueConverter" />
        <Style TargetType="HeaderedContentControl">
            <Setter Property="Margin" Value="0,0,0,28" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock
                            Text="{Binding}"
                            Style="{StaticResource BaseTextBlockStyle}"
                            Margin="10,0,10,16" />
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ui:SimpleStackPanel">
            <Setter Property="Spacing" Value="12" />
        </Style>
    </UserControl.Resources>
    <Grid Margin="20,0">

        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <TextBlock Text="Settings" FontSize="24" Margin="10" />

        <HeaderedContentControl Header="Windows To Display" Grid.Row="1" >
            <ui:SimpleStackPanel Margin="5">
                <ListBox x:Name="WindowsToDisplay" ItemsSource="{Binding SavedSettingsWindows, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  SelectedItem="{Binding SelectedExistingWindowItem, Mode=TwoWay}">
                    <i:Interaction.Behaviors>
                        <behaviours:BindableListBoxDoubleClickBehaviour/>
                    </i:Interaction.Behaviors>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        <ColumnDefinition></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                </Grid>
                                <TextBlock Grid.Column="0" Text="{Binding Path=Identifier}"/>
                                <TextBlock Grid.Column="1" Text="(temporary)" FontStyle="Italic"  Foreground="Red" Padding="5,0,0,0">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=IsTemporary}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </ui:SimpleStackPanel>
        </HeaderedContentControl>

        <HeaderedContentControl Header="Active Windows" Grid.Column="1" Grid.Row="1" >
            <ui:SimpleStackPanel Margin="5">
                <ListBox x:Name="ActiveWindows" ItemsSource="{Binding SettingsWindowList, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  SelectedItem="{Binding SelectedCurrentWindowItem, Mode=TwoWay}" >
                    <i:Interaction.Behaviors>
                        <behaviours:BindableListBoxDoubleClickBehaviour/>
                    </i:Interaction.Behaviors>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock >
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} {1}">
                                            <Binding Path="Name" />
                                            <Binding Path="AutomationId" />
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </ui:SimpleStackPanel>
        </HeaderedContentControl>

        <HeaderedContentControl Header="Hover Over"  Grid.Row="2" >
            <ui:SimpleStackPanel Margin="5">
                <CheckBox Content="Select Element With Mouse Hover" ToolTip="Use this mode to manually select elements when clicking closes the element ie popups"  IsChecked="{Binding HoverSelect,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"/>
                <TextBox ui:ControlHelper.Header="Hover Select Time (ms)"  Text="{Binding HoverSelectTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,Converter={StaticResource numericValueConverter}}"   />

            </ui:SimpleStackPanel>
        </HeaderedContentControl>

        <HeaderedContentControl Header="Theming"  Grid.Row="2" Grid.Column="1">
            <ui:SimpleStackPanel Margin="5">
                <xctk:ColorPicker  SelectedColor="{Binding SelectedColour,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"  HorizontalAlignment="Left" ShowStandardColors="False" ShowRecentColors="False" ShowTabHeaders="False"  Background="Transparent" AvailableColorsSortingMode="HueSaturationBrightness">
                    <xctk:ColorPicker.Style>
                        <Style TargetType="{x:Type xctk:ColorPicker}" BasedOn="{StaticResource {x:Type xctk:ColorPicker}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedThemeType, Converter={StaticResource ThemeTypeConverter}}" Value="Dark">
                                    <Setter Property="HeaderForeground" Value="White"/>
                                    <Setter Property="HeaderBackground" Value="Black"/>
                                    <Setter Property="DropDownBackground" Value="Black"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </xctk:ColorPicker.Style>
                </xctk:ColorPicker>
                <ComboBox ui:ControlHelper.Header="Theme"   ItemsSource="{Binding ThemeTypes}" SelectedItem="{Binding SelectedThemeType, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
            </ui:SimpleStackPanel>
        </HeaderedContentControl>

        <!--<GroupBox  Grid.Row="2" Grid.ColumnSpan="3" Margin="10">
            <Grid Grid.Row="2" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition  Height="Auto" />
                    <RowDefinition  Height="Auto" />
                    <RowDefinition  Height="Auto" />
                    <RowDefinition  Height="Auto" />
                </Grid.RowDefinitions>

                <TextBlock Grid.Row="0" Grid.Column="0" Height="20" Text="Automation Id"/>
                <TextBlock Grid.Row="0" Grid.Column="1" Height="20" Text="Name" />
                <TextBox Grid.Row="1" Margin="0,0,0,10" Grid.Column="0" Height="20" IsReadOnly="True" Text="{Binding SelectedWindowItem.AutomationId}"/>
                <TextBox Grid.Row="1" Margin="0,0,0,10" Grid.Column="1" Height="20" IsReadOnly="True" Text="{Binding SelectedWindowItem.Name}" />
                <TextBox Grid.Column="0" Width="300" Grid.ColumnSpan="2" Grid.Row="2" VerticalAlignment="Center" HorizontalAlignment="Stretch" x:Name="WindowIdentifierBox" Padding="5,0,0,0" Text="{Binding IdentifierToAdd, UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" VerticalContentAlignment="Center"/>

                <TextBlock Grid.Column="0" Width="300" Grid.ColumnSpan="2" Grid.Row="2"  IsHitTestVisible="False"  Text="Window Identifier"  Padding="5,0,0,0"  VerticalAlignment="Center" HorizontalAlignment="Center"  Foreground="DarkGray">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Text, ElementName=WindowIdentifierBox}" Value="">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <CheckBox Grid.Column="1" Grid.ColumnSpan="1"  HorizontalAlignment="Center" VerticalAlignment="Bottom" Grid.Row="2" IsChecked="{Binding SelectedWindowItem.IsTemporary}" Content="Is Temporary" ToolTip="Window displayed until next application close"/>
                <Button Grid.Column="0" Margin="0,5,2,0" HorizontalAlignment="Right" Width="200" Grid.Row="4" Command="{Binding AddWindowCommand}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="Content" Value="Add"></Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedWindowItem.IsCurrent}" Value="False">
                                    <Setter Property="Content" Value="Update"></Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SelectedWindowItem}" Value="{x:Null}">
                                    <Setter Property="IsEnabled" Value="False"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button Grid.Column="1" Margin="2,5,0,0" HorizontalAlignment="Left" Width="200" Grid.Row="4" Command="{Binding DeleteWindowCommand}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="Content" Value="Delete" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedWindowItem.IsCurrent}" Value="True">
                                    <Setter Property="IsEnabled" Value="False"></Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SelectedWindowItem}" Value="{x:Null}">
                                    <Setter Property="IsEnabled" Value="False"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>
            <GroupBox.Style>
                <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
                    <Setter Property="Header" Value="Add Window"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding SelectedWindowItem.IsCurrent}" Value="False">
                            <Setter Property="Header" Value="Edit Window"></Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </GroupBox.Style>
        </GroupBox>-->
        <!--<Grid Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" Margin="20">


            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition  Width="Auto"/>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

           
            <TextBlock Text="Hover Select Time (ms):" HorizontalAlignment="Left" Grid.Row="1"  VerticalAlignment="Center" FontSize="15" Padding="0,0,5,0"/>
            

            
            <TextBlock Text="Inspection Colour:" HorizontalAlignment="Left"  Grid.Column="1" VerticalAlignment="Center" FontSize="15" Padding="0,0,5,0"/>
            
            
            
            <TextBlock Text="Theme:" HorizontalAlignment="Left"  Grid.Column="3" VerticalAlignment="Center" FontSize="15" Padding="0,0,5,0"/>
            
        </Grid>-->
        <!--<Button Content="Test Crash" Margin="5" Grid.ColumnSpan="3" HorizontalAlignment="Center" Width="200" Grid.Row="4" Command="{Binding CrashWindowCommand}"/>-->
    </Grid>
</UserControl>
             